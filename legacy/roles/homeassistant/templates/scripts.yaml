turn_off_tv:
  sequence:
    - service: media_player.turn_off
      data:
        entity_id: media_player.samsungtv_livingroom

goodnight: # Used by emulated hue
  sequence:
    - service: input_select.select_option
      data:
        entity_id: input_select.house_mode
        option: "Sleeping"

leave: # Used by emulated hue
  sequence:
    - service: input_select.select_option
      data:
        entity_id: input_select.house_mode
        option: "Away"

comehome: # Used by emulated hue
  sequence:
    - service: input_select.select_option
      data:
        entity_id: input_select.house_mode
        option: "Auto"

play_artist:
  sequence:
    - service: media_player.select_source
      data:  
        entity_id: "media_player.living_room"
        source: "{% raw %}{{ states('input_select.music_artist_select') }}{% endraw %}"

tts_say:
  sequence:
    - service: media_player.volume_set
      data:
        entity_id: "{% raw %}{{entity_id}}{% endraw %}"
        volume_level: "0.4"
    - service: tts.amazon_polly_say
      data:
        entity_id: "{% raw %}{{entity_id}}{% endraw %}"
        message: "{% raw %}{{message}}{% endraw %}"
    - service: media_player.volume_set
      data:
        entity_id: "{% raw %}{{entity_id}}{% endraw %}"
        volume_level: "0.1"

demo:
  sequence:
    - service: script.tts_say
      data:
        entity_id: media_player.living_room
        message: "Let's give a demo of the house!"
    - service: rest_command.start_morning_tv
    - service: scene.turn_on
      data:
        entity_id: "scene.Demo1"
    - delay: 00:00:10
    - service: scene.turn_on
      data:
        entity_id: "scene.Demo2"
    - service: script.turn_off_tv
    - service: script.tts_say
      data:
        entity_id: media_player.living_room
        message: "That was the demo, hope you enjoyed it!"


################################################################################
# Bedroom                                                                      #
################################################################################

close_bedroom_window:
  sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.bedroom_window_close_relay
    # - wait_template: "{% raw %}{{ is_state('binary_sensor.bedroom_window_window_status', 'on') }}{% endraw %}"
    #   timeout: '00:00:10'
    - delay: 00:00:10
    - service: switch.turn_off
      data:
        entity_id: switch.bedroom_window_close_relay
    - service: notify.slack
      data:
        message: |
              [Bedroom] Window Closed

open_bedroom_window:
  sequence:
    # Only open the window when it's currently closed
    # - condition: state
    #   entity_id: binary_sensor.bedroom_window_window_status
    #   state: 'off'
    - service: switch.turn_on
      data:
        entity_id: switch.bedroom_window_open_relay
    - delay: 00:00:02
    - service: switch.turn_off
      data:
        entity_id: switch.bedroom_window_open_relay
    - service: notify.slack
      data:
        message: |
              [Bedroom] Window Opened
