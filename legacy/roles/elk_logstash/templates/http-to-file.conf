input {
  http {
    id => "my_plugin_id"
    host => "{{logstash_http_bind}}"
    port => {{logstash_http_port}}
    user => "{{logstash_http_user}}"
    password => "{{logstash_http_password}}"
  }
}

filter {
  mutate {
    add_field => { "[@metadata][request_path]" => "%{[headers][request_path]}" } # Store request path in metadata
    remove_field => [ "headers" ] # Remove HTTP headers
  }
}

output {

    if [homeassistant_sensor] {
        stdout {
            id => "casa-logstash"
            codec => rubydebug { metadata => true }
        }

        http {
            http_method => "post"
            url => "http://{{homeassistant_bind_ip}}:{{homeassistant_port}}/api/states/sensor.%{[homeassistant_sensor][name]}"
            headers => {
                "Authorization" => "Bearer {{homeassistant_api_access_tokens.local_integrations}}"
                "content-type" => "application/json"
            }

            # https://stackoverflow.com/questions/24920237/http-output-in-logstash-with-json
            # Wasted way too much time on this: don't use the default format = json and the mapping attribute
            # if you want to pass entire hashes to the output, because mapping will treat them as strings instead of
            # hashes and escape them

            format => "message"
            message => '{"state": "%{[homeassistant_sensor][state]}",
                         "attributes" : %{[homeassistant_sensor][attributes]}}'

        }

    }

    # NOTE: Appending the path is safe here, I tested it, it's impossible to specify a path that traverses up
    # higher up than {{logstash_http_datastore}}. Good, otherwise API users could potentially overwrite any file
    # on the system.

    file {
        path => "{{logstash_http_datastore}}%{[@metadata][request_path]}"
    }
}