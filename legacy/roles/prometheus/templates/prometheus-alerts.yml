groups:
- name: ELK
  rules:
    - alert: elk-logstash.systemd
      expr: "node_systemd_unit_state{name=~'{{logstash_service}}(.*)', state='active'} == 0"
      for: 30s
      labels:
        severity: page
    # - alert: elk-es.http
    #   expr: "probe_success{name='elk-es.http'} == 0"
    #   for: 30s
    #   labels:
    #     severity: page
    # - alert: elk-kibana.http
    #   expr: "probe_success{name='elk-kibana.http'} == 0"
    #   for: 30s
    #   labels:
    #     severity: page

- name: Hubs
  rules:
    - alert: hue.hub
      expr: "probe_success{name='hue.icmp'} == 0"
      for: 30s
      labels:
        severity: page
    - alert: tradfri.hub
      expr: "probe_success{name='tradfri.icmp'} == 0"
      for: 30s
      labels:
        severity: page
    - alert: homematic.hub
      expr: "probe_success{name='homematic.icmp'} == 0"
      for: 30s
      labels:
        severity: page


- name: Homeassistant
  rules:
    - alert: hadash.http
      expr: "probe_success{name='hadash.http'} == 0"
      for: 30s
      labels:
        severity: page
    - alert: homeassistant.http
      expr: "probe_success{name='homeassistant.http'} == 0"
      for: 30s
      labels:
        severity: page

- name: Grafana
  rules:
    - alert: grafana.http
      expr: "probe_success{name='grafana.http'} == 0"
      for: 30s
      labels:
        severity: page

- name: Google
  rules:
    - alert: google.http
      expr: "probe_success{name='google.http'} == 0"
      for: 30s
      labels:
        severity: page

- name: Backups
  rules:
    - alert: backups
      expr: "custom_backup_check_status > 0"
      for: 30s
      labels:
        severity: page

- name: Sanity Tests
  rules:
    - alert: tests-sanity.status
      expr: "casa_tests_status > 0"
      for: 12m # sanity tests run every 5 min, don't complain until at least 2 have failed consecutively
      labels:
        severity: page

- name: High CPU usage
  rules:
    - alert: node.load15
      expr: "node_load15 > 3" # Notify if 15 min load is higher than 3
      for: 30s
      labels:
        severity: page

- name: Node Exporter - Controller
  rules:
    - alert: node_exporter.controller.up
      expr: "up{job='Node Exporter',src='controller'} == 0"
      for: 30s
      labels:
        severity: page

- name: Node Exporter - Energy Tracker
  rules:
    - alert: node_exporter.energy_tracker.up
      expr: "up{job='Node Exporter',src='energy_tracker'} == 0"
      for: 30s
      labels:
        severity: page
    - alert: energy_tracker.ser2net
      expr: "probe_success{name='energy_tracker.ser2net'} == 0"
      for: 30s
      labels:
        severity: page

- name: Node Exporter - TV Controller
  rules:
    - alert: node_exporter.tv_controller.up
      expr: "up{job='Node Exporter',src='tv_controller'} == 0"
      for: 30s
      labels:
        severity: page